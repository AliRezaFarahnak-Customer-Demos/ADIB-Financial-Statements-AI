# ----------------------------------------------------------------------------------------------------
# Template to deploy Azure Resources for one environment
# ----------------------------------------------------------------------------------------------------
parameters:
- name: variableGroupName
  default: 'myVariableGroup'
- name: environmentName
  default: 'DEV'
- name: templateFolderName
  default: 'infra'
- name: templateFileName
  default: 'main.bicep'

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: CreateInfra
  displayName: Initialize Create Infra
  environment: ${{ parameters.environmentName }}

- job: CreateInfraJob
  displayName: Create Infrastructure
  variables:
    - group: ${{ parameters.variableGroupName }}
    - name: environmentNameLower
      value: ${{ lower(parameters.environmentName) }}
    - name: variableGroupName
      value: ${{ parameters.variableGroupName }}
    - name: templateFile
      value: '$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.templateFileName }}'

  steps:
  - bash: |
      appSuffixEnv=$(echo "$(appSuffix)$(environmentNameLower)" | tr '[:upper:]' '[:lower:]')
      echo "appSuffixEnv=$appSuffixEnv"
      echo "##vso[task.setvariable variable=appSuffixEnv]$appSuffixEnv"
      
      backendServiceNameEnv=$(echo "$(backendServiceNamePrefix)-$(environmentNameLower)" | tr '[:upper:]' '[:lower:]')
      echo "backendServiceNameEnv=$backendServiceNameEnv"
      echo "##vso[task.setvariable variable=backendServiceNameEnv]$backendServiceNameEnv"
      
      runDateTimeZ=$(echo $(date '+%Y%m%dT%H%M%SZ'))
      echo "##vso[task.setvariable variable=runDateTimeZ]$runDateTimeZ"
      echo "runDateTimeZ=$runDateTimeZ"
    displayName: 'Create Variables'
    continueOnError: true

  - bash: |
      echo "variableGroupName=$(variableGroupName)"
      echo "createResourceGroup=$(createResourceGroup)"
      echo "resourceGroupName=$(resourceGroupName)"
      echo "subscriptionName=$(subscriptionName)"
      echo "subscriptionId=$(subscriptionId)"
      echo "serviceConnectionName=$(serviceConnectionName)"
      echo "adClientId= $(adClientId)"
      echo "adClientSecret=********"
      echo "adTenantId=$(adTenantId)"
      echo "environmentNameLower=$(environmentNameLower)"
      echo "location=$(location)"
      echo "appSuffix=$(appSuffix)"
      echo "appSuffixEnv=$(appSuffixEnv)"
      echo "backendServiceNamePrefix=$(backendServiceNamePrefix)"
      echo "backendServiceNameEnv=$(backendServiceNameEnv)"
      echo "runnerPrincipalId=$(runnerPrincipalId)"
      echo "runnerPrincipalType=$(runnerPrincipalType)"
      echo "deployOpenAIResources=$(deployOpenAIResources)"
      echo "deployFormsRecognizerResources=$(deployFormsRecognizerResources)"
      echo "deployUserRoles=$(deployUserRoles)"
      echo "deployApplicationRoles=$(deployApplicationRoles)"
      echo "runDateTimeZ=$(runDateTimeZ)"
      echo "templateFile=$(templateFile)"
      echo "Resource Group Command:"
      echo "  az group create --name $(resourceGroupName) --location $(location) --tags LastDeployed=$(runDateTimeZ) Application=$(appSuffix) Environment=$(environmentNameLower)"
      echo "Bicep Deploy Sample Command:"
      echo "  az deployment sub create -n main-deploy-$(runDateTimeZ) --location $(location) --template-file '$(templateFile)' --parameters environmentName=$(environmentNameLower) location=$(location) principalId=$(runnerPrincipalId) principalType=$(runnerPrincipalType) resourceGroupName=$(resourceGroupName) appSuffix=$(appSuffixEnv) backendServiceName=$(backendServiceNameEnv) deployOpenAIResources=$(deployOpenAIResources) deployFormsRecognizerResources=$(deployFormsRecognizerResources) deployOpenAIUserRoles=$(deployUserRoles) deployOpenAIAppRoles=$(deployApplicationRoles)"
      echo "System.DefaultWorkingDirectory=$(System.DefaultWorkingDirectory)"
      tree $(Pipeline.Workspace)
    displayName: 'Display Variables'
    continueOnError: true
    # echo "resourceToken=$(resourceToken)"
    # echo "openAiServiceName=$(openAiServiceName)"
    # echo "openAiResourceGroupName=$(openAiResourceGroupName)"
    # echo "openAiSkuName=$(openAiSkuName)"
    # echo "formRecognizerResourceGroupName=$(formRecognizerResourceGroupName)"
    # echo "formRecognizerServiceName=$(formRecognizerServiceName)"
    # echo "formRecognizerSkuName=$(formRecognizerSkuName)"
    # echo "storageResourceGroupName="$(storageResourceGroupName)"
    # echo "storageAccountName=$(storageAccountName)"

  - ${{ if eq(variables.createResourceGroup, 'true') }}:
    - task: AzureCLI@2
      displayName: 'Create Resource Group'
      inputs:
        azureSubscription: $(serviceConnectionName)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az group create --name $(resourceGroupName) --location $(location) --tags LastDeployed=$(runDateTimeZ) Application=$(appSuffix) Environment=$(environmentNameLower)

  # ----------------------------------------------------------------------------------------------------
  # When I use the nicely formatted deployment task (below), it keeps insisting on deploying everything 
  # only to the FIRST (i.e. dev) Service Connection and ignoring the variable value in serviceConnectionName
  # if I try to deploy to three different subscriptions, the resource groups end up in only one subscription
  # this works fine if I use the "az deploy" command with a set subscription and the same parameters
  # ----------------------------------------------------------------------------------------------------
  - task: AzureCLI@2
    displayName: 'Publish Bicep Resource Command'
    inputs:
      azureSubscription: $(serviceConnectionName)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az account set --subscription $(subscriptionId)
        az deployment sub create -n main-deploy-$(runDateTimeZ) --location $(location) --template-file '$(templateFile)' --parameters environmentName=$(environmentNameLower) location=$(location) principalId=$(runnerPrincipalId) principalType=$(runnerPrincipalType) resourceGroupName=$(resourceGroupName) appSuffix=$(appSuffixEnv) backendServiceName=$(backendServiceNameEnv) deployOpenAIResources=$(deployOpenAIResources) deployFormsRecognizerResources=$(deployFormsRecognizerResources) deployOpenAIUserRoles=$(deployUserRoles) deployOpenAIAppRoles=$(deployApplicationRoles)

  # - task: AzureResourceManagerTemplateDeployment@3
  #   displayName: 'Publish Bicep Resources'
  #   inputs:
  #     csmFile: $(templateFile)
  #     overrideParameters: >
  #       -environmentName $(environmentNameLower)
  #       -location $(location) 
  #       -principalId $(runnerPrincipalId)
  #       -principalType=$(runnerPrincipalType)
  #       -resourceGroupName $(resourceGroupName)
  #       -appSuffix $(appSuffixEnv)
  #       -backendServiceName $(backendServiceNameEnv)
  #       -deployOpenAIResources $(deployOpenAIResources)
  #       -deployFormsRecognizerResources $(deployFormsRecognizerResources)
  #       -deployOpenAIUserRoles $(deployUserRoles)
  #       -deployOpenAIAppRoles $(deployApplicationRoles)
  #     deploymentScope: 'Subscription'
  #     location: $(location)
  #     azureResourceManagerConnection: $(serviceConnectionName)
  #     action: 'Create Or Update Resource Group'
  #     templateLocation: 'Linked artifact'
  #     deploymentMode: 'Incremental'
  #     deploymentOutputs: armDeployment

# -resourceToken "$(resourceToken)"
# -openAiServiceName "$(openAiServiceName)"
# -openAiResourceGroupName "$(openAiResourceGroupName)"
# -openAiSkuName "$(openAiSkuName)"
# -formRecognizerResourceGroupName "$(formRecognizerResourceGroupName)"
# -formRecognizerServiceName "$(formRecognizerServiceName)"
# -formRecognizerSkuName "$(formRecognizerSkuName)"
# -storageResourceGroupName="$(storageResourceGroupName)"
# -storageAccountName "$(storageAccountName)"
